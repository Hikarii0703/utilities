snippet pure ""
#include <bits/stdc++.h>

using namespace std;

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    $0

    return 0;
}
endsnippet

snippet db "debugger"
// tourist's debugger
// so cool
// ====================================================================
template <typename A, typename B>
string to_string(pair<A, B> p);
 
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);
 
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);
 
string to_string(const string& s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}
 
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 
#endif
// ====================================================================
endsnippet

snippet fast
// ====================================================================
template<typename T> inline void write(T x){if(x<0){putchar('-');x=-x;}char buf[20],*p=buf;do{*p++='0'+x%10;x/=10;}while(x);do{putchar(*--p);}while(p>buf);}
template<typename T> inline void read(T &x){char c;while(c=getchar(),c<=' ');bool sign=c=='-';if(sign)c=getchar();x=c-'0';while(c=getchar(),c>='0'&&c<='9'){x=(x<<3)+(x<<1)+(c-'0');}if(sign)x=-x;}
// ====================================================================
endsnippet

snippet freopen ""
#ifndef LOCAL_DEFINE
	freopen("`!p snip.rv = snip.basename`.inp", "r", stdin);
	freopen("`!p snip.rv = snip.basename`.out", "w", stdout);
#endif
endsnippet

snippet binpow "binpow"
int binpow(int a, int b) {
    int ret = 1;
    for (; b; a *= a, b >>= 1)
    if (b & 1) ret *= a;
    return ret;
}
endsnippet
