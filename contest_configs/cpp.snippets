snippet pure
/*
              ||========||
              || i <3 u ||
              ||========||
            (\__/) || (\__/)
            (•ㅅ•) || (•ㅅ•)
            / 　 つ   /> ❤<\
                 君が好き
*/
#define MULTICASE 0

#include <bits/stdc++.h>

using namespace std;

void solveCase() {
$0
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

#if MULTICASE
#pragma message("multicase enabled")
    int nTC;
    cin >> nTC;
    for (int iTC = 0; iTC < nTC; iTC++) {
#endif
        solveCase();
#if MULTICASE
    }
#endif

    return 0;
}
endsnippet

snippet code
/*
              ||========||
              || i <3 u ||
              ||========||
            (\__/) || (\__/)
            (•ㅅ•) || (•ㅅ•)
            / 　 つ   /> ❤<\
                 君が好き
*/
#define MULTICASE 0
#define FILEIO 0

#include <bits/stdc++.h>

using namespace std;

// template ===========================================================
// *INDENT-OFF*
// omgursocute's 2019 total garbage template, revised
using i64 = int64_t;
using u64 = uint64_t;
using db = double;
using ld = long double;

#define all(_x_) (_x_).begin(), (_x_).end()
#define rall(_x_) (_x_).rbegin(), (_x_).rend()

// variadic for-loops ftw
#define ForA(_i_, _a_, _b_) for (i64 _i_ = i64(_a_); (_i_) <= i64(_b_); ++(_i_))
#define ForB(_i_, _a_, _b_, _c_) for (i64 _i_ = i64(_a_); (_i_) <= i64(_b_); (_i_) += i64(_c_))
#define ForN(_i_, _n_) for (i64 _i_ = 0; (_i_) < i64(_n_); ++(_i_))
#define RForA(_i_, _a_, _b_) for (i64 _i_ = i64(_a_); (_i_) >= i64(_b_); --(_i_))
#define RForB(_i_, _a_, _b_, _c_) for (i64 _i_ = i64(_a_); (_i_) >= i64(_b_); (_i_) -= i64(_c_))
#define RForN(_i_, _n_) for (i64 _i_ = i64(_n_) - 1; (_i_) >= 0; --(_i_))

#define ForE1(_a_, _x_) for (auto &_a_ : _x_)
#define ForE2(_a_, _b_, _x_) for (auto &[_a_, _b_] : _x_)
#define ForE3(_a_, _b_, _c_, _x_) for (auto &[_a_, _b_, _c_] : _x_)
#define ForE4(_a_, _b_, _c_, _d_, _x_) for (auto &[_a_, _b_, _c_, _d_] : _x_)

#define NumArgs(_1, _2, _3, _4, ForFunc, ...) ForFunc
#define NumArgsE(_1, _2, _3, _4, _5, ForEFunc, ...) ForEFunc

#define For(...) NumArgs(__VA_ARGS__, ForB, ForA, ForN) (__VA_ARGS__)
#define RFor(...) NumArgs(__VA_ARGS__, RForB, RForA, RForN) (__VA_ARGS__)
#define ForE(...) NumArgsE(__VA_ARGS__, ForE4, ForE3, ForE2, ForE1) (__VA_ARGS__)
#define Rep(_x_) For(_i_, _x_)

// I know they are GCC's built-in functions
#define popcnt(x) __builtin_popcountll(x)
#define clz(x) __builtin_clzll(x)
#define ffs(x) __builtin_ffsll(x)

// who doesn't love FORTRAN-style languages?
inline void read() {} template <class T, class... A> inline void read(T &x, A &...a) { cin >> x; read(a...); }
inline void write() {} template <class T, class... A> inline void write(const T &x, const A &...a) { cout << x; write(a...); }
template <class... A> inline void writeln(const A &...a) { write(a...); cout << '\n'; }

template <class A, class B> inline bool chmin(A &t, const B &f) { if (t > f) { t = f; return true; } return false; }
template <class A, class B> inline bool chmax(A &t, const B &f) { if (t < f) { t = f; return true; } return false; }

// why C++, why?
template <class I, class S, class V> inline void iota_n(I f, S N, V val) { iota(f, f + N, val); }
template <class I, class S> inline void sort_n(I f, S N) { sort(f, f + N); }
template <class I, class S, class C> inline void sort_n(I f, S N, C cmp) { sort(f, f + N, cmp); }

// I definitely didn't steal this from any high-rated coder ;)
#ifdef LOCAL_DEFINE
template <class A, class B> string to_string(pair<A, B> p); template <class A, class B, class C> string to_string(tuple<A, B, C> p);
string to_string(const string &s) { return '"' + s + '"'; } string to_string(const char *s) { return to_string(static_cast<string>(s)); }
string to_string(char c) { return "\'" + string(1, c) + "\'"; } string to_string(bool b) { return (b ? "true" : "false"); }
string to_string(const vector<bool> &v) { bool first = true; string res = "{"; for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += ", "; } first = false; res += to_string(v[i]); } res += "}"; return res; }
template <size_t N> string to_string(bitset<N> v) { string res = ""; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <class A> string to_string(A v) { bool first = true; string res = "{"; for (const auto &x : v) { if (!first) { res += ", "; } first = false; res += to_string(x); } res += "}"; return res; }
template <class A, class B> string to_string(pair<A, B> p) { return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; }
template <class A, class B, class C> string to_string(tuple<A, B, C> p) { return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")"; }
void debug_out() { cerr << endl; } template <class Head, class... Tail> void debug_out(Head H, Tail... T) { cerr << " " << to_string(H); debug_out(T...); }
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) ((void)0)
#endif

#ifdef LOCAL_DEFINE
mt19937_64 rng(258133 + 271048); // yes, feel free to use them ( ͡° ͜ʖ ͡°)
#else
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
#endif

#ifdef PB_DS_ASSOC_CNTNR_HPP
template <class T> using indexed_set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less <T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;
#endif // PB_DS_ASSOC_CNTNR_HPP

namespace streamSetup {
void initIO() {
    ios_base::sync_with_stdio(false); cin.tie(nullptr);
    cout << setprecision(10) << fixed;
#if FILEIO
#ifdef LOCAL_DEFINE
#warning "freopen enabled"
#else
    freopen("`!p snip.rv = snip.basename`.inp", "r", stdin);
    freopen("`!p snip.rv = snip.basename`.out", "w", stdout);
#endif
#endif
}
}  // namespace streamSetup
// *INDENT-ON*
// end of template ====================================================

void solveCase() {
$0
}

// main ===============================================================
// *INDENT-OFF*
signed main() {
    streamSetup::initIO();
#if MULTICASE
#ifdef LOCAL_DEFINE
#warning "multicase enabled"
#endif
    int nTC;
    cin >> nTC;
    For (iTC, nTC) {
#endif
        solveCase();
#if MULTICASE
    }
#endif

    return 0;
}
// *INDENT-ON*
// end of main ========================================================
endsnippet

snippet db
// db =================================================================
// *INDENT-OFF*
#ifdef LOCAL_DEFINE
template <class A, class B> string to_string(pair<A, B> p); template <class A, class B, class C> string to_string(tuple<A, B, C> p);
string to_string(const string &s) { return '"' + s + '"'; } string to_string(const char *s) { return to_string(static_cast<string>(s)); }
string to_string(char c) { return "\'" + string(1, c) + "\'"; } string to_string(bool b) { return (b ? "true" : "false"); }
string to_string(const vector<bool> &v) { bool first = true; string res = "{"; for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += ", "; } first = false; res += to_string(v[i]); } res += "}"; return res; }
template <size_t N> string to_string(bitset<N> v) { string res = ""; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <class A> string to_string(A v) { bool first = true; string res = "{"; for (const auto &x : v) { if (!first) { res += ", "; } first = false; res += to_string(x); } res += "}"; return res; }
template <class A, class B> string to_string(pair<A, B> p) { return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; }
template <class A, class B, class C> string to_string(tuple<A, B, C> p) { return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")"; }
void debug_out() { cerr << endl; } template <class Head, class... Tail> void debug_out(Head H, Tail... T) { cerr << " " << to_string(H); debug_out(T...); }
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) ((void)0)
#endif
// *INDENT-ON*
// end of db ==========================================================
endsnippet

snippet fast
// fast ===============================================================
// *INDENT-OFF*
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
namespace io {
static const int buf_size = 4096; static unsigned char buf[buf_size]; static int buf_len = 0, buf_pos = 0;
inline bool isEof() { if (buf_pos == buf_len) { buf_pos = 0, buf_len = fread(buf, 1, buf_size, stdin); if (buf_pos == buf_len) { return 1; } } return 0; }
inline int getChar() { return isEof() ? -1 : buf[buf_pos++]; }
inline int peekChar() { return isEof() ? -1 : buf[buf_pos]; }
inline bool seekEof() { int c; while ((c = peekChar()) != -1 && c <= 32) { buf_pos++; } return c == -1; }
inline void skipBlanks() { while (!isEof() && buf[buf_pos] <= 32U) { buf_pos++; } }
inline int readChar() { int c = getChar(); while (c != -1 && c <= 32) { c = getChar(); } return c; }
inline int readUInt() { int c = readChar(), x = 0; while ('0' <= c && c <= '9') { x = x * 10 + c - '0', c = getChar(); } return x; }
template <class T = int> inline T readInt() { int s = 1, c = readChar(); T x = 0; if (c == '-') { s = -1, c = getChar(); } else if (c == '+') { c = getChar(); } while ('0' <= c && c <= '9') { x = x * 10 + c - '0', c = getChar(); } return s == 1 ? x : -x; }
inline double readDouble() { int s = 1, c = readChar(); double x = 0; if (c == '-') { s = -1, c = getChar(); } while ('0' <= c && c <= '9') { x = x * 10 + c - '0', c = getChar(); } if (c == '.') { c = getChar(); double coef = 1; while ('0' <= c && c <= '9') { x += (c - '0') * (coef *= 1e-1), c = getChar(); } } return s == 1 ? x : -x; }
inline void readWord(char*s) { int c = readChar(); while (c > 32) { *s++ = c, c = getChar(); } *s = 0; }
inline bool readLine(char*s) { int c = getChar(); while (c != '\n' && c != -1) { *s++ = c, c = getChar(); } *s = 0; return c != -1; }
static int write_buf_pos = 0;
static char write_buf[buf_size];
inline void writeChar(int x) { if (write_buf_pos == buf_size) { fwrite(write_buf, 1, buf_size, stdout), write_buf_pos = 0; } write_buf[write_buf_pos++] = x; }
inline void flush() { if (write_buf_pos) { fwrite(write_buf, 1, write_buf_pos, stdout), write_buf_pos = 0; fflush(stdout); } }
template <class T> inline void writeInt(T x, char end = 0, int output_len = -1) { if (x < 0) { writeChar('-'), x = -x; } char s[24]; int n = 0; while (x || !n) { s[n++] = '0' + x % 10, x /= 10; } while (n < output_len) { s[n++] = '0'; } while (n--) { writeChar(s[n]); } if (end) { writeChar(end); } }
inline void writeWord(const char*s) { while (*s) { writeChar(*s++); } }
inline void writeDouble(double x, int output_len = 0) { if (x < 0) { writeChar('-'), x = -x; } int t = (int)x; writeInt(t), x -= t; writeChar('.'); for (int i = output_len - 1; i > 0; i--) { x *= 10; t = min(9, (int)x); writeChar('0' + t), x -= t; } x *= 10; t = min(9, (int)(x + 0.5)); writeChar('0' + t); }
static struct buffer_flusher_t { ~buffer_flusher_t() { flush(); } } buffer_flusher;
};
#pragma GCC diagnostic pop
// *INDENT-ON*
// end of fast ========================================================
endsnippet

snippet freopen
#ifdef LOCAL_DEFINE
#pragma message("freopen enabled")
#else
    freopen("`!p snip.rv = snip.basename`.inp", "r", stdin);
    freopen("`!p snip.rv = snip.basename`.out", "w", stdout);
#endif
endsnippet

snippet __freopen
#ifndef LOCAL_DEFINE
    freopen("${TM_FILENAME_BASE}.inp", "r", stdin);
    freopen("${TM_FILENAME_BASE}.out", "w", stdout);
#endif
endsnippet

snippet modint
// modint =============================================================
// *INDENT-OFF*
template <int MOD_> struct modnum {
    static constexpr int MOD = MOD_;
    static_assert(MOD_ > 0, "MOD must be positive");
private:
    using i64 = int64_t; int v;
    static int minv(int a, int m) { a %= m; assert(a); return a == 1 ? 1 : int(m - i64(minv(m, a)) * i64(m) / a); }
public:
    modnum() : v(0) {}
    modnum(i64 v_) : v(int(v_ % MOD)) { if (v < 0) v += MOD; }
    explicit operator int() const { return v; }
    friend ostream& operator << (ostream& out, const modnum& n) { return out << int(n); }
    friend istream& operator >> (istream& in, modnum& n) { i64 v_; in >> v_; n = modnum(v_); return in; }
 
    friend bool operator == (const modnum& a, const modnum& b) { return a.v == b.v; }
    friend bool operator != (const modnum& a, const modnum& b) { return a.v != b.v; }
 
    modnum inv() const { modnum res; res.v = minv(v, MOD); return res; }
    friend modnum inv(const modnum& m) { return m.inv(); }
    modnum neg() const { modnum res; res.v = v ? MOD-v : 0; return res; }
    friend modnum neg(const modnum& m) { return m.neg(); }
 
    modnum operator- () const { return neg(); }
    modnum operator+ () const { return modnum(*this); }
 
    modnum& operator ++ () { v ++; if (v == MOD) v = 0; return *this; }
    modnum& operator -- () { if (v == 0) v = MOD; v --; return *this; }
    modnum& operator += (const modnum& o) { v -= MOD-o.v; v = (v < 0) ? v + MOD : v; return *this; }
    modnum& operator -= (const modnum& o) { v -= o.v; v = (v < 0) ? v + MOD : v; return *this; }
    modnum& operator *= (const modnum& o) { v = int(i64(v) * i64(o.v) % MOD); return *this; }
    modnum& operator /= (const modnum& o) { return *this *= o.inv(); }
 
    friend modnum operator ++ (modnum& a, int) { modnum r = a; ++a; return r; }
    friend modnum operator -- (modnum& a, int) { modnum r = a; --a; return r; }
    friend modnum operator + (const modnum& a, const modnum& b) { return modnum(a) += b; }
    friend modnum operator - (const modnum& a, const modnum& b) { return modnum(a) -= b; }
    friend modnum operator * (const modnum& a, const modnum& b) { return modnum(a) *= b; }
    friend modnum operator / (const modnum& a, const modnum& b) { return modnum(a) /= b; }
};
template <class T> T pow(T a, int64_t b) { assert(b >= 0); T r = 1; while (b) { if (b & 1) r *= a; b >>= 1; a *= a; } return r; }
constexpr int MOD_ = 1e9 + 7;
using mod_t = modnum<MOD_>;
// *INDENT-ON*
// end of modint ======================================================
endsnippet

snippet util
// util ===============================================================
// *INDENT-OFF*
#if __cplusplus < 201703L
template <class C> constexpr auto empty(const C& c) -> decltype(c.empty()) { return c.empty(); }
template <class C> constexpr auto size(const C& c) -> decltype(c.size()) { return c.size(); }
template <class C> constexpr auto data(const C& c) -> decltype(c.data()) { return c.data(); }
#endif
template <class I, class S, class V> inline void iota_n(I f, S N, V val) { iota(f, f + N, val); }
template <class I, class S> inline void sort_n(I f, S N) { sort(f, f + N); }
template <class I, class S, class C> inline void sort_n(I f, S N, C cmp) { sort(f, f + N, cmp); }
// *INDENT-ON*
// end of util ========================================================
endsnippet

snippet yc
// yc =================================================================
// *INDENT-OFF*
namespace std {
template <class Fun>
class y_combinator_result {
    Fun fun_;
public:
    template <class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}
    template <class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }
};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }
} // namespace std
// *INDENT-ON*
// end of yc ==========================================================
endsnippet


