snippet db
// db =================================================================
#ifdef LOCAL_DEFINE
namespace std {
using namespace std;
template <class A, class B> string to_string(const std::pair<A, B> &p); template <class A, class B, class C> string to_string(const tuple<A, B, C> &p);
string to_string(const string &s) { return '"' + s + '"'; } string to_string(const char *s) { return to_string(static_cast<string>(s)); }
string to_string(char c) { return "\'" + string(1, c) + "\'"; } string to_string(bool b) { return (b ? "true" : "false"); }
string to_string(const std::vector<bool> &v) { bool first = true; string res = "{"; for (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += ", "; } first = false; res += to_string(v[i]); } res += "}"; return res; }
template <size_t N> string to_string(const bitset<N> &v) { string res = ""; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template <class A> string to_string(const A &v) { bool first = true; string res = "{"; for (const auto &x : v) { if (!first) { res += ", "; } first = false; res += to_string(x); } res += "}"; return res; }
template <class A, class B> string to_string(const std::pair<A, B> &p) { return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; }
template <class A, class B, class C> string to_string(const tuple<A, B, C> &p) { return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")"; }
} // namespace std
void debug_out() { std::cerr << std::endl; } template <class Head, class... Tail> void debug_out(Head H, Tail... T) { std::cerr << " " << std::to_string(H); debug_out(T...); }
#define debug(...) std::cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) "Goodbye."
#endif // LOCAL_DEFINE
// end of db ==========================================================
endsnippet

snippet fast
// fast ===============================================================
namespace fast_io {
int64_t read_nonneg() { char c; while ((c = getchar_unlocked()) < '0' || c > '9'); int64_t v = c - '0'; while ((c = getchar_unlocked()) >= '0' && c <= '9') { v = (v << 3) + (v << 1) + (c - '0'); } return v; }
const int max_ll_size = 20; void put_nonneg(long long n) { int i = max_ll_size; char output_buffer[max_ll_size]; do { output_buffer[--i] = (n % 10) + '0'; n /= 10; } while (n); do { putchar_unlocked(output_buffer[i]); } while (++i < max_ll_size); }
}
using namespace fast_io;
// end of fast ========================================================
endsnippet

snippet freopen
#ifdef LOCAL_DEFINE
#warning "freopen enabled"
#else
	freopen("`!p snip.rv = snip.basename`.inp", "r", stdin);
	freopen("`!p snip.rv = snip.basename`.out", "w", stdout);
#endif
endsnippet

snippet __freopen
#ifndef LOCAL_DEFINE
	freopen("${TM_FILENAME_BASE}.inp", "r", stdin);
	freopen("${TM_FILENAME_BASE}.out", "w", stdout);
#endif
endsnippet

snippet yc
// yc =================================================================
namespace std {
template <class Fun>
class y_combinator_result {
	Fun fun_;
public:
	template <class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}
	template <class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }
};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }
} // namespace std
// end of yc ==========================================================
endsnippet

snippet io
// io =================================================================
template <class A, class B> std::istream &operator>>(std::istream &is, std::pair<A, B> &p) { return is >> p.first >> p.second; }
template <class T> std::istream &operator>>(std::istream &is, std::vector<T> &v) { int sz = v.size(); for (int i = 0; i < sz; i++) { is >> v[i]; } return is; } 
class Reader { private: bool _M_ok_ = true; public: explicit operator bool() { return _M_ok_; } template <typename T> Reader &operator, (T &_t_) { _M_ok_ &= !!(std::cin >> _t_); return *this; } };
#define re Reader(),
template <class T> T reNxt() { T _x_; re _x_; return _x_; }

template <class A, class B> std::ostream &operator<<(std::ostream &os, const std::pair<A, B> &p) { return os << p.first << ' ' << p.second; }
template <class T> std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) { int sz = v.size(); for (int i = 0; i < sz - 1; i++) { os << v[i] << ' '; } return os << v[sz - 1];} 
template <char _sep_, char _end_> class Writer { private: bool _M_ok_ = true; bool _space_; void wrCh(char _c_) { if (_c_) std::cout << _c_; } public: Writer() : _space_(false) {} ~Writer() { wrCh(_end_); } explicit operator bool() { return _M_ok_; } template <typename T> Writer &operator, (const T &_t_) { (_space_) ? (wrCh(_sep_)) : (void(_space_ = true)); _M_ok_ &= !!(std::cout << _t_); return *this; } };
#define pr Writer<'\0', '\0'>(),
#define	prln Writer<'\0', '\n'>(),
#define wr Writer<' ', ' '>(),
#define	wrln Writer<' ', '\n'>(),
// end of io ==========================================================
endsnippet

snippet rng
// rng ================================================================
#ifdef LOCAL_DEFINE
std::mt19937_64 rng(0703);
#else
std::mt19937_64 rng(std::chrono::steady_clock::now().time_since_epoch().count());
#endif // LOCAL_DEFINE
inline long long randrange(long long a, long long b) { return std::uniform_int_distribution<long long>(a, b)(rng); }
// end of rng =========================================================
endsnippet

snippet pbds
// pbds ===============================================================
struct splitmix64_hash { static uint64_t splitmix64(uint64_t x) { x += 0x9e3779b97f4a7c15; x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9; x = (x ^ (x >> 27)) * 0x94d049bb133111eb; return x ^ (x >> 31); } size_t operator()(uint64_t x) const { static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count(); return splitmix64(x + FIXED_RANDOM); } };
#ifdef PB_DS_ASSOC_CNTNR_HPP
template <class T> using idset = __gnu_pbds::tree<T, __gnu_pbds::null_type, std::less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;
// template <class T> using idmulset = __gnu_pbds::tree<T, __gnu_pbds::null_type, std::less_equal<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;
template <class K, class V, class Hash = splitmix64_hash> using hashmap = __gnu_pbds::gp_hash_table<K, V, Hash>;
template <class K, class Hash = splitmix64_hash> using hashset = hashmap<K, __gnu_pbds::null_type, Hash>;
#else
template <class K, class V> using hashmap = std::unordered_map<K, V, splitmix64_hash>;
template <class K> using hashset = std::unordered_set<K, splitmix64_hash>;
#endif // PB_DS_ASSOC_CNTNR_HPP
// end of pbds ========================================================
endsnippet

snippet dvec
// dvec ===============================================================
template <int D, class T> struct dvec : public std::vector<dvec<D - 1, T>> { static_assert(D >= 1, "Vector dimension must be greater than zero!"); template <class... Args> dvec(int n, Args... args) : std::vector<dvec<D - 1, T>>(n, dvec<D - 1, T>(args...)) {} };
template <class T> struct dvec<1, T> : public std::vector<T> { dvec(int n, const T &val = T()) : std::vector<T>(n, val) {} };
// end of dvec ========================================================
endsnippet
