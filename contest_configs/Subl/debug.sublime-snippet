<snippet>
    <content><![CDATA[
// ====================================================================
#ifdef LOCAL
template<typename A, typename B>string to_string(pair<A, B> p);
template<typename A, typename B, typename C>string to_string(tuple<A, B, C> p);
template<typename A, typename B, typename C, typename D>string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) {return '"' + s + '"';}
string to_string(const char* s) {return to_string((string)s);}
string to_string(bool b) {return (b ? "true" : "false");}
string to_string(vector<bool> v) {bool f = 1; string res = "{"; for (int i = 0; i < int(v.size()); i++) {if (!f) {res += ", ";} f = 0; res += to_string(v[i]);} res += '}'; return res;}
template<size_t N>string to_string(bitset<N> v) {string res; for (int i = 0; i < N; i++) {res += char('0' + v[i]);} return res;}
template<typename A>string to_string(A v) {bool f = 1; string res = "{"; for (const auto &x : v) {if (!f) {res += ", ";} f = 0; res += to_string(x);} res += "}"; return res;}
template<typename A, typename B>string to_string(pair<A, B> p) {return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";}
void debug_out() {cerr << endl;}
template<typename _H, typename... _T>void debug_out(_H H, _T... T) {cerr << ' ' << to_string(H); debug_out(T...);}
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) "?"
#endif
// ====================================================================
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>db</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
